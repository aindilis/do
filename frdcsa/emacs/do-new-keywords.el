;; (add function to do-todo "reminded" .  also
;;  add "location".  start specifying a semantics for
;;  these. "already completed"
;;  (do-todo-mode add delayed (postponed? same difference?))
;;  "fixed", "before", "always", etc.  also make case insensitive.
;;  add "ordered", "shipped" etc (as in ordered from online, etc)
;;  Make a function to add things to this.  Or make a variable.
;;  Have it query prolog or something. "obtained instead
;;  at", "already owned", etc.
;;  (have it have certain arities, like 'obtained instead
;;   at'/2: (obtained instead at (staples) (dollar tree)))
;;  "partial solution" "cancelled" "answer")

(setq do-new-keywords
 '(("reminded" . (("desc" . "for when you reminded someone to do something, track the time of the reminder")
		  ("arity" . nil)))
   ("location" . (("desc" . "")
		  ("arity" . nil)))
   ("already completed" . (("desc" . "")
			   ("arity" . nil)))
   ("delayed" . (("desc" . "")
		 ("arity" . nil)))
   ("fixed" . (("desc" . "")
	       ("arity" . nil)))
   ("before" . (("desc" . "")
		("arity" . nil)))
   ("after" . (("desc" . "")
	       ("arity" . nil)))
   ("always" . (("desc" . "")
		("arity" . nil)))
   ("ordered" . (("desc" . "")
		 ("arity" . nil)))
   ("shipped" . (("desc" . "")
		 ("arity" . nil)))
   ("obtained instead at" . (("desc" . "")
			     ("arity" . "2")))
   ("already owned" . (("desc" . "")
		       ("arity" . nil)))
   ("partial solution" . (("desc" . "")
			  ("arity" . nil)))
   ("cancelled" . (("desc" . "")
		   ("arity" . nil)))
   ("answer" . (("desc" . "")
		("arity" . nil)))
   ("not found" . (("desc" . "")
		   ("arity" . nil)))
   ("found at" . (("desc" . "")
		  ("arity" . nil)))
   ("temp solution" . (("desc" . "")
		       ("arity" . nil)))
   ("mostly completed" . (("desc" . "")
			  ("arity" . nil)))
   ("scheduled" . (("desc" . "")
		   ("arity" . nil)))
   ("what is this?" . (("desc" . "")
		       ("arity" . nil)))
   ("PLANS" . (("desc" . "")
	       ("arity" . nil)))
   ("SCHEDULE" . (("desc" . "")
		  ("arity" . nil)))
   ("SHOPPINGLIST" . (("desc" . "")
		      ("arity" . nil)))
   ;; ("at (\d{1,2}):(\d{2}) (a|p)m" . (("desc" . "")
   ;; 				     ("arity" . nil)))
   ("note elsewhere" . (("desc" . "")
			("arity" . nil)))
   ("has problem" . (("desc" . "")
		     ("arity" . nil)))
   ("estimated-time-of-completion" . (("desc" . "")
				      ("arity" . nil)))
   ("error message" . (("desc" . "")
		       ("arity" . nil)))
   ("plan" . (("desc" . "")
	      ("arity" . nil)))
   ("processed" . (("desc" . "")
		   ("arity" . nil)))
   ("test" . (("desc" . "")
	      ("arity" . nil)))
   ("add to flp" . (("desc" . "")
		    ("arity" . nil)))
   ("do not get" . (("desc" . "")
		    ("arity" . nil)))
   ("completed another way" . (("desc" . "")
			       ("arity" . nil)))
   ("alexa correction" . (("desc" . "")
			  ("arity" . nil)))
   ("impossible" . (("desc" . "")
		    ("arity" . nil)))
   ("correct" . (("desc" . "")
		 ("arity" . nil)))
   ("reorder" . (("desc" . "")
		 ("arity" . nil)))
   ("procedure" . (("desc" . "")
		   ("arity" . nil)))
   ("unknown status" . (("desc" . "")
			("arity" . nil)))
   ("failed" . (("desc" . "")
		("arity" . nil)))
   ("not true" . (("desc" . "")
		  ("arity" . nil)))
   ("acted on" . (("desc" . "")
		  ("arity" . nil)))
   ("resolved" . (("desc" . "")
		  ("arity" . nil)))
   ("concurrently" . (("desc" . "")
		      ("arity" . nil)))
   ("partially complete". (("desc" . "")
			   ("arity" . nil)))
   ("finish" . (("desc" . "")
		("arity" . nil)))
   ("reward" . (("desc" . "")
		("arity" . nil)))
   ("penalty" . (("desc" . "")
		 ("arity" . nil)))
   ("find-or-create" . (("desc" . "")
			("arity" . nil)))
   ("recurrent" . (("desc" . "")
		   ("arity" . nil)))
   ("add to" . (("desc" . "")
		("arity" . nil)))
   ("found" . (("desc" . "")
	       ("arity" . nil)))
   ("urgency" . (("desc" . "")
		 ("arity" . nil)))
   ("importance" . (("desc" . "")
		    ("arity" . nil)))
   ("urgent" . (("desc" . "")
		("arity" . nil)))
   ("not yet" . (("desc" . "")
		 ("arity" . nil)))
   ("potential solution" (("desc" . "")
			  ("arity" . nil)))
   ))

(defun do-todo-list-generate-regex-for-incoming-predicates ()
 ""
 (interactive)
 (concat "(\\(" (join "\\|" (kmax-alist-keys do-new-keywords)) "\\)\\b")
 ;; (concat "\\(" (join "\\|" (mapcar #'shell-quote-argument (kmax-alist-keys do-new-keywords))) "\\)\\b")
 )

(provide 'do-new-keywords)
